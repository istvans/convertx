#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
import re
import subprocess
import threading as th
import time
import tkinter as tk
from tkinter import filedialog, ttk, messagebox
from PIL import Image, ImageTk


###############################################################################

def terminate(process, unset=False):
    if process is not None:
        process.terminate()
        try:
            process.wait(timeout=15)
        except subprocess.TimeoutExpired:
            process.kill()
        if unset:
            process = None

def set_widget_colors(w, bg=None, fg=None, tbg=None, pbg=None, sbg=None):
    if bg:
        w["bg"] = bg
    if fg:
        w["fg"] = fg
    if tbg:
        w["readonlybackground"] = tbg
    if pbg:
        s = tk.ttk.Style()
        s.theme_use('clam')
        style = "custom.Horizontal.TProgressbar"
        s.configure(style, foreground=pbg, background=pbg)
        w["style"] = style
    if sbg:
        s = tk.ttk.Style()
        s.theme_use('clam')
        style = "Line.TSeparator"
        s.configure(style, background=sbg)
        w["style"] = style

###############################################################################

class ReadOnlyEntry(tk.Entry):
    ### Public Methods ###
    def __init__(self, master, name=None, change_cb=None
            , text=None, **kw):
        super().__init__(master, **kw)
        self.__name = name
        self.__change_cb = change_cb
        self["state"] = "readonly"
        self["relief"] = tk.FLAT
        if text is not None:
            self.set_text(text)
    
    def get_text(self):
        return self.get()

    def set_text(self, content):
        self["state"] = "normal"
        self.delete(0, tk.END)
        self.insert(tk.END, content)
        self["state"] = "readonly"
        if self.__change_cb is not None:
            self.__change_cb(self.__name)

###############################################################################

class InfoGetter:
    ### Public Methods ###
    def __init__(self, frame=None, finished_cb=None):
        if frame is None:
            raise RuntimeError("frame cannot be None!")
        self.__frame = frame
        self.__finished_cb = finished_cb
        self.__cancelled = False
        self.__frame_counter_proc = None
        self.__gather_thread = None
        self.__exiting = False
        self.num_of_frames = None
        self.one_percent = None

    def __bool__(self):
        return self.num_of_frames is not None and self.one_percent is not None

    def start(self):
        self.__cancelled = False
        self.__frame.set_state("Előkészítés...")
           
        if self.__frame_counter_proc is None:
            self.__frame_counter_proc = subprocess.Popen(["ffmpeg"
                # input file options:
                # input file:
                , "-i", self.__frame.get_input()
                # output file options:
                ,"-map","0:v:0","-c","copy","-f","null","-y"
                # output file:
                ,"/dev/null"]
                , stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
        
        if self.__gather_thread is None:
            self.__gather_thread = th.Thread(target=self.__gather)
            self.__gather_thread.start()
    
    def stop(self, exiting=False):
        self.__exiting = exiting
        self.__cancelled = True
        terminate(process=self.__frame_counter_proc)

    def run(self, frame):
        if not self:
            return True
        return frame < self.num_of_frames
    
    ### Private Methods ###
        
    def __gather(self):
        last_match = None
        for line in iter(self.__frame_counter_proc.stdout.readline, ""):
            l = line.rstrip()
            match = re.search("^\s*frame=\s*(\d+)", l)
            if match:
                last_match = match

        if self.__exiting:
            return
       
        # to allow restart
        self.__frame_counter_proc = None
        self.__gather_thread = None
        
        if self.__cancelled:
            return

        if last_match:
            self.num_of_frames = int(last_match.group(1))
            self.one_percent = self.num_of_frames / 100

        if self.num_of_frames is None:
            self.__frame.set_state("Hiba! A hátralévő idő ismeretlen!")
        
        if self.__finished_cb is not None:
            self.__finished_cb()
        
###############################################################################

class Application(tk.Frame):
    ### Public Methods ###
    def __init__(self, master):
        super().__init__(master)
        self.__master = master
        self.__master.protocol("WM_DELETE_WINDOW", self.__on_closing)

        if not self.__setup_paths():
            return

        self.__main = self.winfo_toplevel()

        self.__input = ["input", False]
        self.__output = ["output", False]
        self.__config = os.path.join(self.__cfg_dir, "config.ini")
        self.__progress_thread = None
        self.__converter_lock = th.Lock()
        self.__converter_proc = None 
        self.__saveb = None
        self.__input_info = InfoGetter(frame=self, finished_cb=self.__start_conversion)
        
        self.__setup_window()
        self.__create_widgets()
        self.__order_widgets()
        self.__read_cfg()
        self.__set_color(bg="white", fg="black", pbg="green", sbg="black")

    def set_state(self, text=None):
        if self.__statee is not None:
            self.__statee.set_text(text)

    def get_input(self):
        if self.__opene is not None:
            return self.__opene.get_text()
        return None

    ### Private Methods ###

    def __setup_paths(self):
        self.__package = "convert-x"
        self.__etc = "/etc"

        self.__readonly_dir = os.path.join(self.__etc, self.__package)
        if not os.path.exists(self.__readonly_dir):
            messagebox.showerror("Végzetes hiba!", "A program alap mappája hiánzyik! {}".format(self.__readonly_dir))
            self.__master.destroy()
            return False

        self.__cfg_dir = os.path.join(os.environ["HOME"], ".config", self.__package)
        if not os.path.exists(self.__cfg_dir):
            os.makedirs(self.__cfg_dir, 0o700)

        icon_path = os.path.join(self.__readonly_dir, "XviD.ico")
        try:
            img = ImageTk.PhotoImage(file=icon_path)
            self.__master.tk.call('wm', 'iconphoto', self.__master._w, img)
        except tk.TclError as e:
            messagebox.showerror("Végzetes hiba!", "A program ikonja hiánzyik! {}".format(icon_path))
            self.__master.destroy()
            return False
        return True

    def __on_closing(self):
        if messagebox.askyesno("A program bezárása", "Biztos, hogy ki akarsz lépni?"):
            self.__stop(stay_alive=False)
            self.__master.destroy()

    def __read_cfg(self):
        try:
            with open(self.__config) as config:
                for line in config:
                    if line.startswith("dir="):
                        self.__dire.set_text(line.split('=')[1])
        except IOError:
            pass

    def __load_logo(self):
        logo_path = os.path.join(self.__readonly_dir, "XviD_logo.png")
        try:
            logo_image = Image.open(logo_path)
        except tk.TclError:
            messagebox.showerror("Végzetes hiba!", "A program logója hiánzyik! {}".format(logo_path))
            self.__master.destroy()
            return

        lh = 64
        lw = int(lh * (logo_image.size[0] / logo_image.size[1]))
        logo_image = logo_image.resize((lw, lh), Image.ANTIALIAS)
        logo = ImageTk.PhotoImage(logo_image)
        self.__logo_canvas = tk.Label(self, image=logo)
        self.__logo_canvas.image = logo

    def __create_widgets(self):
        self.__load_logo()
        
        self.__dirl = tk.Label(self, text="Az alapértelmezett mappa (ha a megadott elérési út mount-olva van!):")
        self.__dire = ReadOnlyEntry(self
                , text="Még nem adtál meg alapértelmezett mappát.", width=self.__entry_width)
        self.__dirb = tk.Button(self, text="Választás", command=self.__select_dir)

        self.__openl = tk.Label(self, text="Az eredeti file, amit át szeretnél konvertálni:")
        self.__opene = ReadOnlyEntry(self
                , text="Itt jelenik majd meg az eredeti file elérési útvonala."
                , name=self.__input[0], change_cb=self.__io_set)
        self.__openb = tk.Button(self, text="Megnyitás", command=self.__open_input)
        
        self.__savel = tk.Label(self, text="Az új file, amire konvertálni fogunk:")
        self.__savee = ReadOnlyEntry(self
                , text="Itt jelenik majd meg az új file elérési útvonala."
                , name=self.__output[0], change_cb=self.__io_set)
        self.__save_buttons = tk.Frame(self)
        self.__saveb = tk.Button(self.__save_buttons, text="Mentés", command=self.__save_output, state=tk.DISABLED)
        self.__save_delb = tk.Button(self.__save_buttons, text="Törlés", command=self.__save_delete, state=tk.DISABLED)

        self.__command_separator_north = tk.ttk.Separator(self, orient="horizontal")

        self.__command_buttons = tk.Frame(self)
        self.__startb = tk.Button(self.__command_buttons, text="Start", command=self.__start, state=tk.DISABLED)
        self.__stopb = tk.Button(self.__command_buttons, text="Stop", command=self.__stop, state=tk.DISABLED)
        
        self.__command_separator_south = tk.ttk.Separator(self, orient="horizontal")

        self.__statee = ReadOnlyEntry(self)
        
        self.__elapsedl = tk.Label(self, text="Az eltelt idő:")
        self.__elapsede = ReadOnlyEntry(self)
        
        self.__leftl = tk.Label(self, text="A becsült hátralévő idő:")
        self.__lefte = ReadOnlyEntry(self)

        self.__progressbar = tk.ttk.Progressbar(self, orient="horizontal", mode="determinate")

    def __set_color(self, bg, fg, pbg, sbg):
        set_widget_colors(self.__logo_canvas, bg, fg)
        set_widget_colors(self.__dirl, bg, fg)
        set_widget_colors(self.__dire, bg, fg, tbg=bg)
        set_widget_colors(self.__dirb, bg, fg)
        set_widget_colors(self.__openl, bg, fg)
        set_widget_colors(self.__opene, bg, fg, tbg=bg)
        set_widget_colors(self.__openb, bg, fg)
        set_widget_colors(self.__savel, bg, fg)
        set_widget_colors(self.__savee, bg, fg, tbg=bg)
        set_widget_colors(self.__save_buttons, bg=bg)
        set_widget_colors(self.__saveb, bg, fg)
        set_widget_colors(self.__save_delb, bg, fg)
        set_widget_colors(self.__command_separator_north, sbg=sbg)
        set_widget_colors(self.__command_buttons, bg=bg)
        set_widget_colors(self.__startb, bg, fg)
        set_widget_colors(self.__stopb, bg, fg)
        set_widget_colors(self.__command_separator_south, sbg=sbg)
        set_widget_colors(self.__statee, bg, fg, tbg=bg)
        set_widget_colors(self.__elapsedl, bg, fg)
        set_widget_colors(self.__elapsede, bg, fg, tbg=bg)
        set_widget_colors(self.__leftl, bg, fg)
        set_widget_colors(self.__lefte, bg, fg, tbg=bg)
        set_widget_colors(self.__progressbar, pbg=pbg)
        set_widget_colors(self.__master, bg=bg)
        set_widget_colors(self, bg=bg)
       
    def __order_widgets(self):
        self.__logo_canvas.place(relx=0.9, rely=0.9, anchor=tk.SE)
        
        self.__dirl.grid(sticky="w")
        self.__dire.grid(sticky="ew")
        self.__dirb.grid(sticky="w")
        self.__openl.grid(sticky="w")
        self.__opene.grid(sticky="ew")
        self.__openb.grid(sticky="w")
        self.__savel.grid(sticky="w")
        self.__savee.grid(sticky="ew")
        self.__save_buttons.grid(sticky="w")
        self.__saveb.grid(sticky="w", row=0, column=0)
        self.__save_delb.grid(sticky="w", row=0, column=1, padx=(5, 0))

        self.__command_separator_north.grid(sticky="ew", pady=5)

        self.__command_buttons.grid(sticky="w", pady=5)
        self.__startb.grid(sticky="w", row=0, column=0)
        self.__stopb.grid(sticky="w", row=0, column=1, padx=(5, 0))
        
        self.__command_separator_south.grid(sticky="ew", pady=5)
        
        self.__statee.grid(sticky="ew")
        self.__elapsedl.grid(sticky="w", pady=(30, 0))
        self.__elapsede.grid(sticky="w")
        self.__leftl.grid(sticky="w")
        self.__lefte.grid(sticky="w")
        self.__progressbar.grid(sticky="ew")

        self.grid_columnconfigure(0, weight=3)
        self.grid_columnconfigure(1, weight=1)
        self.grid(sticky="nsew", padx=5, pady=5)

    def __io_set(self, *args):
        if self.__saveb is None:
            return
        
        if self.__input[0] == args[0]:
            self.__input[1] = True
        if self.__output[0] == args[0]:
            self.__output[1] = True

        if self.__input[1]:
            self.__saveb["state"] = tk.NORMAL
        else:
            self.__saveb["state"] = tk.DISABLED

        if self.__input[1] and self.__output[1]:
            self.__startb["state"] = tk.NORMAL
        else:
            self.__startb["state"] = tk.DISABLED

    def __setup_window(self):
        self.__main.title("Conv2XviD - Konvertálás XviD formátumra (v0.0.4)")
        self.__main.resizable(0, 0)
        ws = self.winfo_screenwidth()
        hs = self.winfo_screenheight()
        w = int(ws * 0.92)
        h = 420
        ratio = 90/736
        self.__entry_width = int(w * ratio)
        x = (ws/2) - (w/2)
        y = (hs/2) - (h/2)
        self.__main.geometry("%dx%d+%d+%d" % (w, h, x, y))

    def __select_dir(self):
        saved = self.__dire.get_text()
        if saved is not None:
            d = tk.filedialog.askdirectory(initialdir=saved)
        else:
            d = tk.filedialog.askdirectory()
        if d:
            self.__dire.set_text(d)
            with open(self.__config, 'w') as config:
                config.write("dir=" + d)

    def __open_input(self):
        d = self.__dire.get_text()
        if d is not None:
            inp = tk.filedialog.askopenfilename(initialdir=d)
        else:
            inp = tk.filedialog.askopenfilename()
        if inp:
            self.__opene.set_text(inp)

    def __save_output(self):
        out = tk.filedialog.asksaveasfile(defaultextension=".avi", filetypes=[("avi file-ok", "*.avi")])
        if out:
            self.__savee.set_text(out.name)
    
    def __save_delete(self):
        save_file = self.__savee.get_text()
        if save_file is not None and messagebox.askyesno("Az új file törlése", "Biztos, hogy törölni szeretnéd?"):
            try:
                os.remove(save_file)
            except FileNotFoundError:
                pass
            self.__save_delb["state"] = tk.DISABLED

    def __started(self):
        self.__dirb["state"] = tk.DISABLED
        self.__openb["state"] = tk.DISABLED
        self.__saveb["state"] = tk.DISABLED
        self.__save_delb["state"] = tk.DISABLED
        self.__startb["state"] = tk.DISABLED
        self.__stopb["state"] = tk.NORMAL
    
    def __stopped(self, forced=False):
        if forced:
            self.set_state("Megszakítva")
        else:
            self.set_state("Kész!")
        self.__progressbar.step(amount=(-1 * self.__progressbar["value"]))
        self.__dirb["state"] = tk.NORMAL
        self.__openb["state"] = tk.NORMAL
        self.__saveb["state"] = tk.NORMAL
        self.__save_delb["state"] = tk.NORMAL
        self.__startb["state"] = tk.NORMAL
        self.__stopb["state"] = tk.DISABLED

    def __start(self):
        self.__started()
        self.__input_info.start()

    def __start_conversion(self):
        self.set_state("Konvertálás...")
        with self.__converter_lock:
            self.__converter_proc = subprocess.Popen(["ffmpeg"
                # input file options:
                # input file:
                , "-i", self.__opene.get_text()
                # output file options:
                , "-threads", "1"
                , "-vcodec", "libxvid", "-q:v", "0"
                , "-q:a", "0", "-acodec", "libmp3lame", "-b:a", "128k", "-ac", "2", "-y"
                # output file:
                , self.__savee.get_text()]
                , stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
    
        if self.__progress_thread is None:
            self.__progress_thread = th.Thread(target=self.__progress)
            self.__progress_thread.start()

    def __progress(self):
        percent = 0
        frame = 0
        t = th.currentThread()
        start = time.time()
        while getattr(t, "do_run", True) and self.__input_info.run(frame):
            with self.__converter_lock:
                converting = (self.__converter_proc is not None)
                if converting:
                    l = self.__converter_proc.stdout.readline().rstrip()
                else:
                    t.do_run = False
                    continue

                if self.__input_info:
                    match = re.search("frame=\s*(\d+)", l)
                    if match:
                        now = time.time()
                        frame = int(match.group(1))
                        if frame >= percent and getattr(t, "do_run", True):
                            percent = (frame / self.__input_info.one_percent)
                            incr = percent - self.__progressbar["value"]
                            self.__progressbar.step(incr)
                            percent = frame + self.__input_info.one_percent

                    if getattr(t, "do_run", True):
                        elapsed = time.time() - start
                        self.__elapsede.set_text(self.__sec2time(elapsed))
                   
                        if frame:
                            needed_per_frame = elapsed / frame
                            left = self.__input_info.num_of_frames - frame
                            estimate = left * needed_per_frame
                            self.__lefte.set_text(self.__sec2time(estimate))

        # normal finish should switch button states too
        if getattr(t, "do_run", True):
            self.__stopped()
        # to allow restart
        self.__progress_thread = None

    def __stop(self, stay_alive=True):
        if stay_alive and not messagebox.askyesno("A konvertálás megszakítása"
                , "Biztos, hogy le akarod állítani a konvertálást?"):
            return

        self.__input_info.stop(exiting=not stay_alive)
        
        if self.__progress_thread is not None:
            self.__progress_thread.do_run = False

        with self.__converter_lock:
            terminate(process=self.__converter_proc, unset=True)

        self.__stopped(forced=True)

    def __sec2time(self, seconds):
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        return "%d:%02d:%02d" % (h, m, s)

###############################################################################
###############################################################################

if __name__ == "__main__":
    root = tk.Tk()
    app = Application(master=root)
    app.mainloop()

